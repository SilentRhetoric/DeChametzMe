/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"DeChametz","structs":{},"methods":[{"name":"Bootstrap contract","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"Sell chametz","args":[{"type":"string","name":"chametz"}],"returns":{"type":"string"},"actions":{"create":[],"call":["OptIn"]},"readonly":false,"events":[{"name":"Sale","args":[{"type":"address","name":"seller"},{"type":"uint64","name":"time"},{"type":"string","name":"chametz_sold"}]}],"recommendations":{}},{"name":"Repurchase chametz","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["CloseOut"]},"readonly":false,"events":[{"name":"Repurchase","args":[{"type":"address","name":"buyer"},{"type":"uint64","name":"time"},{"type":"string","name":"chametz_repurchased"}]}],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":1},"local":{"ints":0,"bytes":1}},"keys":{"global":{"is_jewish":{"keyType":"AVMString","valueType":"AVMString","key":"aXNfamV3aXNo"},"token_asset_id":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG9rZW5fYXNzZXRfaWQ="}},"local":{"chametz_sold":{"keyType":"AVMString","valueType":"AVMBytes","key":"Y2hhbWV0el9zb2xk","desc":"Description of the chametz sold"}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[373],"errorMessage":"Must hold a ForChametz token to repurchase chametz"},{"pc":[290],"errorMessage":"Must not be holding a ForChametz token already to sell chametz"},{"pc":[108],"errorMessage":"OnCompletion is not CloseOut"},{"pc":[144],"errorMessage":"OnCompletion is not NoOp"},{"pc":[125],"errorMessage":"OnCompletion is not OptIn"},{"pc":[288,370],"errorMessage":"account opted into asset"},{"pc":[165],"errorMessage":"can only call when creating"},{"pc":[111,128,147],"errorMessage":"can only call when not creating"},{"pc":[387,427],"errorMessage":"check self.chametz_sold exists for account"},{"pc":[180,274,285,301,367,378],"errorMessage":"check self.token_asset_id exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiADAAEEJgQOdG9rZW5fYXNzZXRfaWQEFR98dQxjaGFtZXR6X3NvbGQCACoxGEAAE4ICCWlzX2pld2lzaAJub2coImcxG0EAVIIDBGT04e8Er7m+6ATdX7dRNhoAjgMAKAAUAAIiQzEZgQISRDEYRIgA9ClMULAjQzEZIxJEMRhENhoBiACOKUxQsCNDMRkURDEYRIgAESlMULAjQzEZQP/DMRgURCNDigABMQAyCRJEIihlRBREsTIKRwOyLLIrsiqyKYAUaHR0cHM6Ly9kZWNoYW1ldHoubWWyJ4AINENIQU1FVFqyJYAKRm9yQ2hhbWV0erImI7IkIrIjgYCt4gSyIoEDshAisgGzKLQ8ZyIoZUQWiYoBATEAIihlRHAARBREMQAqi/9msSIoZUQyCkkxAIAEU2VsbIv/ULIFshSyE7IAI7ISshEkshAisgGzMQAyBxZQK1CL/1CABKz/UKNMULCL/4mKAAExACIoZURwAEQjEkSxIihlRDIKMQBKIipjRIAKUmVwdXJjaGFzZUxQsgWyFLITsgAjshKyESSyECKyAbMxACIqY0QxADIHFlArUEsBUIAEsuMHdExQsIk=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":3,"patch":3}},"events":[{"name":"Sale","args":[{"type":"address","name":"seller"},{"type":"uint64","name":"time"},{"type":"string","name":"chametz_sold"}]},{"name":"Repurchase","args":[{"type":"address","name":"buyer"},{"type":"uint64","name":"time"},{"type":"string","name":"chametz_repurchased"}]}],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the DeChametz contract
 */
export type DeChametzArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'Bootstrap contract()uint64': Record<string, never>
    'Sell chametz(string)string': {
      chametz: string
    }
    'Repurchase chametz()string': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'Bootstrap contract()uint64': []
    'Sell chametz(string)string': [chametz: string]
    'Repurchase chametz()string': []
  }
}

/**
 * The return type for each method
 */
export type DeChametzReturns = {
  'Bootstrap contract()uint64': bigint
  'Sell chametz(string)string': string
  'Repurchase chametz()string': string
}

/**
 * Defines the types of available calls and state of the DeChametz smart contract.
 */
export type DeChametzTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'Bootstrap contract()uint64' | 'Bootstrap contract', {
      argsObj: DeChametzArgs['obj']['Bootstrap contract()uint64']
      argsTuple: DeChametzArgs['tuple']['Bootstrap contract()uint64']
      returns: DeChametzReturns['Bootstrap contract()uint64']
    }>
    & Record<'Sell chametz(string)string' | 'Sell chametz', {
      argsObj: DeChametzArgs['obj']['Sell chametz(string)string']
      argsTuple: DeChametzArgs['tuple']['Sell chametz(string)string']
      returns: DeChametzReturns['Sell chametz(string)string']
    }>
    & Record<'Repurchase chametz()string' | 'Repurchase chametz', {
      argsObj: DeChametzArgs['obj']['Repurchase chametz()string']
      argsTuple: DeChametzArgs['tuple']['Repurchase chametz()string']
      returns: DeChametzReturns['Repurchase chametz()string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        isJewish: string
        tokenAssetId: bigint
      }
      maps: {}
    }
    local: {
      keys: {
        /**
         * Description of the chametz sold
         */
        chametzSold: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type DeChametzSignatures = keyof DeChametzTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type DeChametzNonVoidMethodSignatures = keyof DeChametzTypes['methods'] extends infer T ? T extends keyof DeChametzTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the DeChametz smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends DeChametzSignatures> = DeChametzTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the DeChametz smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DeChametzSignatures> = DeChametzTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = DeChametzTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = DeChametzTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type DeChametzCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type DeChametzDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: DeChametzCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the DeChametz smart contract
 */
export abstract class DeChametzParamsFactory {
  /**
   * Gets available optIn ABI call param factories
   */
  static get optIn() {
    return {
      /**
       * Constructs opt-in ABI call params for the DeChametz smart contract using the Sell chametz(string)string ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      sellChametz(params: CallParams<DeChametzArgs['obj']['Sell chametz(string)string'] | DeChametzArgs['tuple']['Sell chametz(string)string']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'Sell chametz(string)string' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.chametz],
        }
      },
    }
  }

  /**
   * Gets available closeOut ABI call param factories
   */
  static get closeOut() {
    return {
      /**
       * Constructs close out ABI call params for the DeChametz smart contract using the Repurchase chametz()string ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      repurchaseChametz(params: CallParams<DeChametzArgs['obj']['Repurchase chametz()string'] | DeChametzArgs['tuple']['Repurchase chametz()string']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'Repurchase chametz()string' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the Bootstrap contract()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrapContract(params: CallParams<DeChametzArgs['obj']['Bootstrap contract()uint64'] | DeChametzArgs['tuple']['Bootstrap contract()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'Bootstrap contract()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the DeChametz smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class DeChametzFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `DeChametzFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new DeChametzClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new DeChametzClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the DeChametz smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: DeChametzDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new DeChametzClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DeChametz smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DeChametz smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DeChametz smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new DeChametzClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the DeChametz smart contract
 */
export class DeChametzClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `DeChametzClient`
   *
   * @param appClient An `AppClient` instance which has been created with the DeChametz app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `DeChametzClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends DeChametzNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `DeChametzClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<DeChametzClient> {
    return new DeChametzClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `DeChametzClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<DeChametzClient> {
    return new DeChametzClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the DeChametz smart contract using the `Sell chametz(string)string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn params
       */
      sellChametz: (params: CallParams<DeChametzArgs['obj']['Sell chametz(string)string'] | DeChametzArgs['tuple']['Sell chametz(string)string']>) => {
        return this.appClient.params.optIn(DeChametzParamsFactory.optIn.sellChametz(params))
      },

    },

    /**
     * Gets available closeOut methods
     */
    closeOut: {
      /**
       * Makes a close out call to an existing instance of the DeChametz smart contract using the `Repurchase chametz()string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The closeOut params
       */
      repurchaseChametz: (params: CallParams<DeChametzArgs['obj']['Repurchase chametz()string'] | DeChametzArgs['tuple']['Repurchase chametz()string']> = {args: []}) => {
        return this.appClient.params.closeOut(DeChametzParamsFactory.closeOut.repurchaseChametz(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DeChametz smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the DeChametz smart contract using the `Bootstrap contract()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrapContract: (params: CallParams<DeChametzArgs['obj']['Bootstrap contract()uint64'] | DeChametzArgs['tuple']['Bootstrap contract()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(DeChametzParamsFactory.bootstrapContract(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the DeChametz smart contract using the `Sell chametz(string)string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn transaction
       */
      sellChametz: (params: CallParams<DeChametzArgs['obj']['Sell chametz(string)string'] | DeChametzArgs['tuple']['Sell chametz(string)string']>) => {
        return this.appClient.createTransaction.optIn(DeChametzParamsFactory.optIn.sellChametz(params))
      },

    },

    /**
     * Gets available closeOut methods
     */
    closeOut: {
      /**
       * Makes a close out call to an existing instance of the DeChametz smart contract using the `Repurchase chametz()string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The closeOut transaction
       */
      repurchaseChametz: (params: CallParams<DeChametzArgs['obj']['Repurchase chametz()string'] | DeChametzArgs['tuple']['Repurchase chametz()string']> = {args: []}) => {
        return this.appClient.createTransaction.closeOut(DeChametzParamsFactory.closeOut.repurchaseChametz(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DeChametz smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the DeChametz smart contract using the `Bootstrap contract()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrapContract: (params: CallParams<DeChametzArgs['obj']['Bootstrap contract()uint64'] | DeChametzArgs['tuple']['Bootstrap contract()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(DeChametzParamsFactory.bootstrapContract(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available optIn methods
     */
    optIn: {
      /**
       * Opts the user into an existing instance of the DeChametz smart contract using the `Sell chametz(string)string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The optIn result
       */
      sellChametz: async (params: CallParams<DeChametzArgs['obj']['Sell chametz(string)string'] | DeChametzArgs['tuple']['Sell chametz(string)string']> & SendParams) => {
        const result = await this.appClient.send.optIn(DeChametzParamsFactory.optIn.sellChametz(params))
        return {...result, return: result.return as unknown as (undefined | DeChametzReturns['Sell chametz(string)string'])}
      },

    },

    /**
     * Gets available closeOut methods
     */
    closeOut: {
      /**
       * Makes a close out call to an existing instance of the DeChametz smart contract using the `Repurchase chametz()string` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The closeOut result
       */
      repurchaseChametz: async (params: CallParams<DeChametzArgs['obj']['Repurchase chametz()string'] | DeChametzArgs['tuple']['Repurchase chametz()string']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.closeOut(DeChametzParamsFactory.closeOut.repurchaseChametz(params))
        return {...result, return: result.return as unknown as (undefined | DeChametzReturns['Repurchase chametz()string'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the DeChametz smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the DeChametz smart contract using the `Bootstrap contract()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrapContract: async (params: CallParams<DeChametzArgs['obj']['Bootstrap contract()uint64'] | DeChametzArgs['tuple']['Bootstrap contract()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(DeChametzParamsFactory.bootstrapContract(params))
      return {...result, return: result.return as unknown as (undefined | DeChametzReturns['Bootstrap contract()uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new DeChametzClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current DeChametz app
   */
  state = {
    /**
     * Methods to access global state for the current DeChametz app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          isJewish: result.is_jewish,
          tokenAssetId: result.token_asset_id,
        }
      },
      /**
       * Get the current value of the is_jewish key in global state
       */
      isJewish: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("is_jewish")) as string | undefined },
      /**
       * Get the current value of the token_asset_id key in global state
       */
      tokenAssetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("token_asset_id")) as bigint | undefined },
    },
    /**
     * Methods to access local state for the current DeChametz app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            chametzSold: new BinaryStateValue(result.chametz_sold),
          }
        },
        /**
         * Get the current value of the chametz_sold key in local state
         */
        chametzSold: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.local(encodedAddress).getValue("chametz_sold")) as Uint8Array | undefined) },
      }
    },
  }

  public newGroup(): DeChametzComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a Bootstrap contract()uint64 method call against the DeChametz contract
       */
      bootstrapContract(params: CallParams<DeChametzArgs['obj']['Bootstrap contract()uint64'] | DeChametzArgs['tuple']['Bootstrap contract()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrapContract(params)))
        resultMappers.push((v) => client.decodeReturnValue('Bootstrap contract()uint64', v))
        return this
      },
      get optIn() {
        return {
          sellChametz: (params: CallParams<DeChametzArgs['obj']['Sell chametz(string)string'] | DeChametzArgs['tuple']['Sell chametz(string)string']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn.sellChametz(params)))
            resultMappers.push((v) => client.decodeReturnValue('Sell chametz(string)string', v))
            return this
          },
        }
      },
      get closeOut() {
        return {
          repurchaseChametz: (params: CallParams<DeChametzArgs['obj']['Repurchase chametz()string'] | DeChametzArgs['tuple']['Repurchase chametz()string']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.closeOut.repurchaseChametz(params)))
            resultMappers.push((v) => client.decodeReturnValue('Repurchase chametz()string', v))
            return this
          },
        }
      },
      /**
       * Add a clear state call to the DeChametz contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as DeChametzComposer
  }
}
export type DeChametzComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the Bootstrap contract()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrapContract(params?: CallParams<DeChametzArgs['obj']['Bootstrap contract()uint64'] | DeChametzArgs['tuple']['Bootstrap contract()uint64']>): DeChametzComposer<[...TReturns, DeChametzReturns['Bootstrap contract()uint64'] | undefined]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the DeChametz smart contract using the Sell chametz(string)string ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    sellChametz(params?: CallParams<DeChametzArgs['obj']['Sell chametz(string)string'] | DeChametzArgs['tuple']['Sell chametz(string)string']>): DeChametzComposer<[...TReturns, DeChametzReturns['Sell chametz(string)string'] | undefined]>
  }

  /**
   * Gets available closeOut methods
   */
  readonly closeOut: {
    /**
     * Makes a close out call to an existing instance of the DeChametz smart contract using the Repurchase chametz()string ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    repurchaseChametz(params?: CallParams<DeChametzArgs['obj']['Repurchase chametz()string'] | DeChametzArgs['tuple']['Repurchase chametz()string']>): DeChametzComposer<[...TReturns, DeChametzReturns['Repurchase chametz()string'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the DeChametz smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): DeChametzComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): DeChametzComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<DeChametzComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<DeChametzComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<DeChametzComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<DeChametzComposerResults<TReturns>>
}
export type DeChametzComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

