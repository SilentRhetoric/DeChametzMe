#pragma version 10
#pragma typetrack false

// smart_contracts.de_chametz.contract.DeChametz.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 4
    bytecblock "token_asset_id" 0x151f7c75 "chametz_sold" 0x002a
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/de_chametz/contract.py:31-32
    // # Using native Algorand Python types here so they look nice on Lora :)
    // self.is_jewish = String("no")
    pushbytess "is_jewish" "no" // "is_jewish", "no"
    app_global_put
    // smart_contracts/de_chametz/contract.py:33
    // self.token_asset_id = UInt64(0)
    bytec_0 // "token_asset_id"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // smart_contracts/de_chametz/contract.py:29
    // class DeChametz(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@8
    pushbytess 0x64f4e1ef 0xafb9bee8 0xdd5fb751 // method "Bootstrap contract()uint64", method "Sell chametz(string)string", method "Repurchase chametz()string"
    txna ApplicationArgs 0
    match main_Bootstrap_contract_route@5 main_Sell_chametz_route@6 main_Repurchase_chametz_route@7

main_after_if_else@10:
    // smart_contracts/de_chametz/contract.py:29
    // class DeChametz(ARC4Contract):
    intc_0 // 0
    return

main_Repurchase_chametz_route@7:
    // smart_contracts/de_chametz/contract.py:95-96
    // # This method clears account LocalStorage, so it is bound to OnComplete=CloseOut
    // @arc4.abimethod(allow_actions=["CloseOut"], name="Repurchase chametz")
    txn OnCompletion
    pushint 2 // CloseOut
    ==
    assert // OnCompletion is not CloseOut
    txn ApplicationID
    assert // can only call when not creating
    callsub repurchase_chametz
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_Sell_chametz_route@6:
    // smart_contracts/de_chametz/contract.py:63-64
    // # This method uses account LocalStorage, so it is bound to OnComplete=OptIn
    // @arc4.abimethod(allow_actions=["OptIn"], name="Sell chametz")
    txn OnCompletion
    intc_1 // OptIn
    ==
    assert // OnCompletion is not OptIn
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/de_chametz/contract.py:29
    // class DeChametz(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/de_chametz/contract.py:63-64
    // # This method uses account LocalStorage, so it is bound to OnComplete=OptIn
    // @arc4.abimethod(allow_actions=["OptIn"], name="Sell chametz")
    callsub sell_chametz
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_Bootstrap_contract_route@5:
    // smart_contracts/de_chametz/contract.py:40
    // @arc4.abimethod(name="Bootstrap contract")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub bootstrap
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@8:
    // smart_contracts/de_chametz/contract.py:29
    // class DeChametz(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@10
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts.de_chametz.contract.DeChametz.bootstrap() -> bytes:
bootstrap:
    // smart_contracts/de_chametz/contract.py:40-41
    // @arc4.abimethod(name="Bootstrap contract")
    // def bootstrap(self) -> arc4.UInt64:  # Returning an ARC-4 UInt64
    proto 0 1
    // smart_contracts/de_chametz/contract.py:42
    // assert Txn.sender == Global.creator_address
    txn Sender
    global CreatorAddress
    ==
    assert
    // smart_contracts/de_chametz/contract.py:43
    // assert self.token_asset_id == 0
    intc_0 // 0
    bytec_0 // "token_asset_id"
    app_global_get_ex
    assert // check self.token_asset_id exists
    !
    assert
    // smart_contracts/de_chametz/contract.py:45-58
    // itxn.AssetConfig(
    //     total=10000000,
    //     decimals=0,
    //     default_frozen=True,
    //     asset_name="ForChametz",
    //     unit_name="4CHAMETZ",
    //     url="https://dechametz.me",
    //     manager=Global.current_application_address,
    //     reserve=Global.current_application_address,
    //     freeze=Global.current_application_address,
    //     clawback=Global.current_application_address,
    //     fee=0,
    // )
    // .submit()
    itxn_begin
    // smart_contracts/de_chametz/contract.py:52
    // manager=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/de_chametz/contract.py:53-55
    // reserve=Global.current_application_address,
    // freeze=Global.current_application_address,
    // clawback=Global.current_application_address,
    dupn 3
    itxn_field ConfigAssetClawback
    itxn_field ConfigAssetFreeze
    itxn_field ConfigAssetReserve
    itxn_field ConfigAssetManager
    // smart_contracts/de_chametz/contract.py:51
    // url="https://dechametz.me",
    pushbytes "https://dechametz.me"
    itxn_field ConfigAssetURL
    // smart_contracts/de_chametz/contract.py:50
    // unit_name="4CHAMETZ",
    pushbytes "4CHAMETZ"
    itxn_field ConfigAssetUnitName
    // smart_contracts/de_chametz/contract.py:49
    // asset_name="ForChametz",
    pushbytes "ForChametz"
    itxn_field ConfigAssetName
    // smart_contracts/de_chametz/contract.py:48
    // default_frozen=True,
    intc_1 // 1
    itxn_field ConfigAssetDefaultFrozen
    // smart_contracts/de_chametz/contract.py:47
    // decimals=0,
    intc_0 // 0
    itxn_field ConfigAssetDecimals
    // smart_contracts/de_chametz/contract.py:46
    // total=10000000,
    pushint 10000000 // 10000000
    itxn_field ConfigAssetTotal
    // smart_contracts/de_chametz/contract.py:45
    // itxn.AssetConfig(
    pushint 3 // acfg
    itxn_field TypeEnum
    // smart_contracts/de_chametz/contract.py:56
    // fee=0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/de_chametz/contract.py:45-58
    // itxn.AssetConfig(
    //     total=10000000,
    //     decimals=0,
    //     default_frozen=True,
    //     asset_name="ForChametz",
    //     unit_name="4CHAMETZ",
    //     url="https://dechametz.me",
    //     manager=Global.current_application_address,
    //     reserve=Global.current_application_address,
    //     freeze=Global.current_application_address,
    //     clawback=Global.current_application_address,
    //     fee=0,
    // )
    // .submit()
    itxn_submit
    // smart_contracts/de_chametz/contract.py:44
    // self.token_asset_id = (
    bytec_0 // "token_asset_id"
    // smart_contracts/de_chametz/contract.py:45-59
    // itxn.AssetConfig(
    //     total=10000000,
    //     decimals=0,
    //     default_frozen=True,
    //     asset_name="ForChametz",
    //     unit_name="4CHAMETZ",
    //     url="https://dechametz.me",
    //     manager=Global.current_application_address,
    //     reserve=Global.current_application_address,
    //     freeze=Global.current_application_address,
    //     clawback=Global.current_application_address,
    //     fee=0,
    // )
    // .submit()
    // .created_asset.id
    itxn CreatedAssetID
    // smart_contracts/de_chametz/contract.py:44-60
    // self.token_asset_id = (
    //     itxn.AssetConfig(
    //         total=10000000,
    //         decimals=0,
    //         default_frozen=True,
    //         asset_name="ForChametz",
    //         unit_name="4CHAMETZ",
    //         url="https://dechametz.me",
    //         manager=Global.current_application_address,
    //         reserve=Global.current_application_address,
    //         freeze=Global.current_application_address,
    //         clawback=Global.current_application_address,
    //         fee=0,
    //     )
    //     .submit()
    //     .created_asset.id
    // )
    app_global_put
    // smart_contracts/de_chametz/contract.py:61
    // return arc4.UInt64(self.token_asset_id)
    intc_0 // 0
    bytec_0 // "token_asset_id"
    app_global_get_ex
    assert // check self.token_asset_id exists
    itob
    retsub


// smart_contracts.de_chametz.contract.DeChametz.sell_chametz(chametz: bytes) -> bytes:
sell_chametz:
    // smart_contracts/de_chametz/contract.py:63-65
    // # This method uses account LocalStorage, so it is bound to OnComplete=OptIn
    // @arc4.abimethod(allow_actions=["OptIn"], name="Sell chametz")
    // def sell_chametz(self, chametz: arc4.String) -> arc4.String:
    proto 1 1
    // smart_contracts/de_chametz/contract.py:68
    // Asset(self.token_asset_id).balance(Txn.sender) == 0
    txn Sender
    intc_0 // 0
    bytec_0 // "token_asset_id"
    app_global_get_ex
    assert // check self.token_asset_id exists
    asset_holding_get AssetBalance
    assert // account opted into asset
    !
    // smart_contracts/de_chametz/contract.py:66-69
    // # The sender must not be holding a ForChametz token already
    // assert (
    //     Asset(self.token_asset_id).balance(Txn.sender) == 0
    // ), "Must not be holding a ForChametz token already to sell chametz"
    assert // Must not be holding a ForChametz token already to sell chametz
    // smart_contracts/de_chametz/contract.py:71-72
    // # Update the sender's local state with the chametz's description
    // self.chametz_sold[Txn.sender] = chametz.bytes
    txn Sender
    bytec_2 // "chametz_sold"
    frame_dig -1
    app_local_put
    // smart_contracts/de_chametz/contract.py:74-83
    // # Transfer the token to the sender using clawback (see asset_sender)
    // itxn.AssetTransfer(
    //     xfer_asset=self.token_asset_id,
    //     asset_amount=1,
    //     sender=Global.current_application_address,
    //     asset_sender=Global.current_application_address,
    //     asset_receiver=Txn.sender,
    //     note=b"Sell" + chametz.bytes,
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/de_chametz/contract.py:76
    // xfer_asset=self.token_asset_id,
    intc_0 // 0
    bytec_0 // "token_asset_id"
    app_global_get_ex
    assert // check self.token_asset_id exists
    // smart_contracts/de_chametz/contract.py:78
    // sender=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/de_chametz/contract.py:79
    // asset_sender=Global.current_application_address,
    dup
    // smart_contracts/de_chametz/contract.py:80
    // asset_receiver=Txn.sender,
    txn Sender
    // smart_contracts/de_chametz/contract.py:81
    // note=b"Sell" + chametz.bytes,
    pushbytes 0x53656c6c
    frame_dig -1
    concat
    itxn_field Note
    itxn_field AssetReceiver
    itxn_field AssetSender
    itxn_field Sender
    // smart_contracts/de_chametz/contract.py:77
    // asset_amount=1,
    intc_1 // 1
    itxn_field AssetAmount
    itxn_field XferAsset
    // smart_contracts/de_chametz/contract.py:74-75
    // # Transfer the token to the sender using clawback (see asset_sender)
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    // smart_contracts/de_chametz/contract.py:82
    // fee=0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/de_chametz/contract.py:74-83
    // # Transfer the token to the sender using clawback (see asset_sender)
    // itxn.AssetTransfer(
    //     xfer_asset=self.token_asset_id,
    //     asset_amount=1,
    //     sender=Global.current_application_address,
    //     asset_sender=Global.current_application_address,
    //     asset_receiver=Txn.sender,
    //     note=b"Sell" + chametz.bytes,
    //     fee=0,
    // ).submit()
    itxn_submit
    // smart_contracts/de_chametz/contract.py:88
    // seller=arc4.Address(Txn.sender),
    txn Sender
    // smart_contracts/de_chametz/contract.py:89
    // time=arc4.UInt64(Global.latest_timestamp),
    global LatestTimestamp
    itob
    // smart_contracts/de_chametz/contract.py:87-91
    // Sale(
    //     seller=arc4.Address(Txn.sender),
    //     time=arc4.UInt64(Global.latest_timestamp),
    //     chametz_sold=arc4.String.from_bytes(chametz.bytes),
    // )
    concat
    bytec_3 // 0x002a
    concat
    frame_dig -1
    concat
    // smart_contracts/de_chametz/contract.py:85-92
    // # Emitting an ARC-28 event with an ARC-4 Struct of ARC-4 typed fields
    // arc4.emit(
    //     Sale(
    //         seller=arc4.Address(Txn.sender),
    //         time=arc4.UInt64(Global.latest_timestamp),
    //         chametz_sold=arc4.String.from_bytes(chametz.bytes),
    //     )
    // )
    pushbytes 0xacff50a3 // method "Sale(address,uint64,string)"
    swap
    concat
    log
    // smart_contracts/de_chametz/contract.py:93
    // return arc4.String.from_bytes(chametz.bytes)
    frame_dig -1
    retsub


// smart_contracts.de_chametz.contract.DeChametz.repurchase_chametz() -> bytes:
repurchase_chametz:
    // smart_contracts/de_chametz/contract.py:95-97
    // # This method clears account LocalStorage, so it is bound to OnComplete=CloseOut
    // @arc4.abimethod(allow_actions=["CloseOut"], name="Repurchase chametz")
    // def repurchase_chametz(self) -> arc4.String:
    proto 0 1
    // smart_contracts/de_chametz/contract.py:100
    // Asset(self.token_asset_id).balance(Txn.sender) == 1
    txn Sender
    intc_0 // 0
    bytec_0 // "token_asset_id"
    app_global_get_ex
    assert // check self.token_asset_id exists
    asset_holding_get AssetBalance
    assert // account opted into asset
    intc_1 // 1
    ==
    // smart_contracts/de_chametz/contract.py:98-101
    // # Initial checks on the sender
    // assert (
    //     Asset(self.token_asset_id).balance(Txn.sender) == 1
    // ), "Must hold a ForChametz token to repurchase chametz"
    assert // Must hold a ForChametz token to repurchase chametz
    // smart_contracts/de_chametz/contract.py:103-112
    // # Transfer the token back to the app using clawback (see asset_sender)
    // itxn.AssetTransfer(
    //     xfer_asset=self.token_asset_id,
    //     asset_amount=1,
    //     sender=Global.current_application_address,
    //     asset_sender=Txn.sender,
    //     asset_receiver=Global.current_application_address,
    //     note=b"Repurchase" + self.chametz_sold[Txn.sender],
    //     fee=0,
    // ).submit()
    itxn_begin
    // smart_contracts/de_chametz/contract.py:105
    // xfer_asset=self.token_asset_id,
    intc_0 // 0
    bytec_0 // "token_asset_id"
    app_global_get_ex
    assert // check self.token_asset_id exists
    // smart_contracts/de_chametz/contract.py:107
    // sender=Global.current_application_address,
    global CurrentApplicationAddress
    // smart_contracts/de_chametz/contract.py:108
    // asset_sender=Txn.sender,
    txn Sender
    // smart_contracts/de_chametz/contract.py:109-110
    // asset_receiver=Global.current_application_address,
    // note=b"Repurchase" + self.chametz_sold[Txn.sender],
    dup2
    // smart_contracts/de_chametz/contract.py:110
    // note=b"Repurchase" + self.chametz_sold[Txn.sender],
    intc_0 // 0
    bytec_2 // "chametz_sold"
    app_local_get_ex
    assert // check self.chametz_sold exists for account
    pushbytes 0x52657075726368617365
    swap
    concat
    itxn_field Note
    itxn_field AssetReceiver
    itxn_field AssetSender
    itxn_field Sender
    // smart_contracts/de_chametz/contract.py:106
    // asset_amount=1,
    intc_1 // 1
    itxn_field AssetAmount
    itxn_field XferAsset
    // smart_contracts/de_chametz/contract.py:103-104
    // # Transfer the token back to the app using clawback (see asset_sender)
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    // smart_contracts/de_chametz/contract.py:111
    // fee=0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/de_chametz/contract.py:103-112
    // # Transfer the token back to the app using clawback (see asset_sender)
    // itxn.AssetTransfer(
    //     xfer_asset=self.token_asset_id,
    //     asset_amount=1,
    //     sender=Global.current_application_address,
    //     asset_sender=Txn.sender,
    //     asset_receiver=Global.current_application_address,
    //     note=b"Repurchase" + self.chametz_sold[Txn.sender],
    //     fee=0,
    // ).submit()
    itxn_submit
    // smart_contracts/de_chametz/contract.py:114
    // chametz_repurchased = self.chametz_sold[Txn.sender]
    txn Sender
    intc_0 // 0
    bytec_2 // "chametz_sold"
    app_local_get_ex
    assert // check self.chametz_sold exists for account
    // smart_contracts/de_chametz/contract.py:119
    // buyer=arc4.Address(Txn.sender),
    txn Sender
    // smart_contracts/de_chametz/contract.py:120
    // time=arc4.UInt64(Global.latest_timestamp),
    global LatestTimestamp
    itob
    // smart_contracts/de_chametz/contract.py:118-122
    // Repurchase(
    //     buyer=arc4.Address(Txn.sender),
    //     time=arc4.UInt64(Global.latest_timestamp),
    //     chametz_repurchased=arc4.String.from_bytes(chametz_repurchased),
    // )
    concat
    bytec_3 // 0x002a
    concat
    dig 1
    concat
    // smart_contracts/de_chametz/contract.py:116-123
    // # Emitting an ARC-28 event with an ARC-4 Struct of ARC-4 typed fields
    // arc4.emit(
    //     Repurchase(
    //         buyer=arc4.Address(Txn.sender),
    //         time=arc4.UInt64(Global.latest_timestamp),
    //         chametz_repurchased=arc4.String.from_bytes(chametz_repurchased),
    //     )
    // )
    pushbytes 0xb2e30774 // method "Repurchase(address,uint64,string)"
    swap
    concat
    log
    // smart_contracts/de_chametz/contract.py:124
    // return arc4.String.from_bytes(chametz_repurchased)
    retsub
