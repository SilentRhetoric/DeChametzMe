{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Getting Started with Your AlgoKit Project",
  "steps": [
    {
      "file": "README.md",
      "description": "Welcome to DeChametz.me, an example AlgoKit template-based smart contract project. In this tour, will be guided through the main features and capabilities included in the template and see them in action for a small demo app.",
      "line": 1,
      "selection": {
        "start": {
          "line": 1,
          "character": 1
        },
        "end": {
          "line": 2,
          "character": 1
        }
      }
    },
    {
      "file": "README.md",
      "description": "Start by ensuring you have followed the setup of pre-requisites before bootstrapping the project.",
      "line": 6
    },
    {
      "file": ".algokit.toml",
      "description": "This is the main configuration file used by algokit-cli to manage the project. To create a new smart contract, you can use the [`algokit generate`](https://github.com/algorandfoundation/algokit-cli/blob/main/docs/features/generate.md) command and invoke a pre-bundled generator template by running `algokit generate smart-contract` (see how it is defined in the `.algokit.toml` and create your own generators if needed). This action will create a new folder in the `smart_contracts` directory, named after your project. Each folder contains a `contract.py` file, which is the entry point for your contract implementation, and a `deploy_config.py` file that performs the deployment of the contract. Additionally you can define custom commands to run (similar to `npm` scripts), see definitions under `[project]` section in `.algokit.toml`.",
      "line": 1
    },
    {
      "file": "smart_contracts/de_chametz/deploy_config.py",
      "description": "The deployment script can deploy the smart contract using the [`AlgoKit Typed Client`](https://github.com/algorandfoundation/algokit-cli/blob/main/docs/features/generate.md#1-typed-clients) feature. The invocation if deploy is aliased in `.algokit.toml` file, allowing simple deployments via `algokit project deploy` command.",
      "line": 7
    },
    {
      "file": "tests/de_chametz_unit_test.py",
      "description": "The unit tests in this file demonstrate mocking, setting up fixtures, and testing smart contract calls on an AlgoKit typed client. Unit tests leverage the Algorand Python testing framework to emulate the AVM without needing a connection to any network",
      "line": 15
    },
    {
      "file": ".vscode/launch.json",
      "description": "Refer to the pre-bundled Visual Studio launch configurations, offering various options on how to execute the build and deployment of your smart contracts. Alternatively execute `algokit project run` to see list of available custom commands.",
      "line": 1
    },
    {
      "file": ".vscode/extensions.json",
      "description": "We highly recommend installing the recommended extensions to get the most out of this project in your VSCode IDE.",
      "line": 1
    },
    {
      "file": "smart_contracts/__main__.py",
      "description": "This file contains helper scripts for contract management. These automate tasks like compiling, generating clients, and deploying. Usually, you won't need to edit this file, but advanced users can expand it for custom needs.",
      "line": 1
    },
    {
      "file": "smart_contracts/__main__.py",
      "description": "Adjust this config to utilize the [AlgoKit AVM Debugger](https://github.com/algorandfoundation/algokit-avm-vscode-debugger) VSCode plugin available on the [VSCode Extension Marketplace](https://marketplace.visualstudio.com/items?itemName=algorandfoundation.algokit-avm-vscode-debugger). A new folder will be automatically created in the `.algokit` directory with source maps of all TEAL contracts in this workspace, as well as traces that will appear in a folder at the root of the workspace. You can then use the traces as entry points to trigger the debug extension. Make sure to have the `.algokit.toml` file available at the root of the workspace.",
      "line": 12
    }
  ]
}
